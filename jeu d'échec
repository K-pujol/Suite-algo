int plateau [][] = new int [8][8];
int taille_case = 70 ;
int plateau_y= taille_case/2;
int nbLignes = plateau.length;
int nbColonnes = plateau[0].length;
ArrayList<Piece> pieces = new ArrayList<Piece>();
PImage roi_b_Image;
PImage roi_n_Image;
PImage reine_b_Image;
PImage reine_n_Image;
PImage fou_b_Image;
PImage fou_n_Image;
PImage cavalier_b_Image;
PImage cavalier_n_Image;
PImage tour_b_Image;
PImage tour_n_Image;
PImage Pion_b_Image;
PImage Pion_n_Image;

void settings() {
  int largeur = taille_case * nbColonnes;
  int hauteur = taille_case * nbLignes;
  size(largeur, hauteur);
}

void setup() {
 
  // Noirs
  for (int x = 0; x < 8; x++) {
    Pion_n_Image = loadImage("pion_n.png");
    pieces.add(new Piece("Pion", false, 1, x));
  }
  
  roi_n_Image = loadImage("roi_n.png");
  pieces.add(new Piece("Roi", false, 0, 4));

  reine_n_Image = loadImage("reine_n.png");
  pieces.add(new Piece("Reine", false, 0, 3));

  fou_n_Image = loadImage("reine_n.png");
  pieces.add(new Piece("Reine", false, 0, 3));

  cavalier_n_Image = loadImage("reine_n.png");
  pieces.add(new Piece("Reine", false, 0, 3));

  tour_n_Image = loadImage("tour_n.png");
  pieces.add(new Piece("Tour", false, 0, 0));
  tour_n_Image = loadImage("tour_n.png");
  pieces.add(new Piece("Tour", false, 0, 7));

  cavalier_n_Image = loadImage("cavalier_n.png");
  pieces.add(new Piece("Cavalier", false, 0, 1));
  cavalier_n_Image = loadImage("cavalier_n.png");
  pieces.add(new Piece("Cavalier", false, 0, 6));
  
  fou_n_Image = loadImage("fou_n.png");
  pieces.add(new Piece("Fou", false, 0, 2));
  fou_n_Image = loadImage("fou_n.png");
  pieces.add(new Piece("Fou", false, 0, 5));
  
  
  
  // Blanc
  for (int x = 0; x < 8; x++) {
    Pion_b_Image = loadImage("pion_b.png");
    pieces.add(new Piece("Pion", true, 6, x));
  }
  
  roi_b_Image = loadImage("roi_b.png");
  pieces.add(new Piece("Roi", true, 7, 4));

  reine_b_Image = loadImage("reine_b.png");
  pieces.add(new Piece("Reine", true, 7, 3));

  fou_b_Image = loadImage("reine_b.png");
  pieces.add(new Piece("Reine", true, 7, 3));

  cavalier_b_Image = loadImage("reine_b.png");
  pieces.add(new Piece("Reine", true, 7, 3));

  tour_b_Image = loadImage("tour_b.png");
  pieces.add(new Piece("Tour", true, 7, 0));
  tour_b_Image = loadImage("tour_b.png");
  pieces.add(new Piece("Tour", true, 7, 7));

  cavalier_b_Image = loadImage("cavalier_b.png");
  pieces.add(new Piece("Cavalier", true, 7, 1));
  cavalier_b_Image = loadImage("cavalier_b.png");
  pieces.add(new Piece("Cavalier", true, 7, 6));
  
  fou_b_Image = loadImage("fou_b.png");
  pieces.add(new Piece("Fou", true, 7, 2));
  fou_b_Image = loadImage("fou_b.png");
  pieces.add(new Piece("Fou", true, 7, 5));
  
}

void draw() {
  background(255);

  for (int y = 0; y < plateau.length; y++) {
    for (int x = 0; x < plateau[y].length; x++) {
      if ((x + y) % 2 == 0) {
        fill(255, 238, 210);
      } else {
        fill(73, 49, 14);
      }
      rect(x * taille_case, y * taille_case, taille_case, taille_case);
    }
  }

  for (Piece p : pieces) {
    float pieceX = p.x * taille_case + taille_case / 2; // Position X centrée
    float pieceY = p.y * taille_case + taille_case / 2; // Position Y centrée

    if (p.Type.equals("Roi") && p.Couleur == false) {
      imageMode(CENTER);
      image(roi_n_Image, pieceX, pieceY, taille_case/1.5, taille_case/1.5);
    }

    if (p.Type.equals("Reine") && p.Couleur == false) {
      imageMode(CENTER);
      image(reine_n_Image, pieceX, pieceY, taille_case, taille_case);
    }

    if (p.Type.equals("Pion") && p.Couleur == false) {
      imageMode(CENTER);
      image(Pion_n_Image, pieceX, pieceY, taille_case/1.5, taille_case/1.5);
    }

    if (p.Type.equals("Fou") && p.Couleur == false) {
      imageMode(CENTER);
      image(fou_n_Image, pieceX, pieceY, taille_case/1.5, taille_case/1.5);
    }

    if (p.Type.equals("Cavalier") && p.Couleur == false) {
      imageMode(CENTER);
      image(cavalier_n_Image, pieceX, pieceY, taille_case, taille_case);
    }
    if (p.Type.equals("Tour") && p.Couleur == false) {
      imageMode(CENTER);
      image(tour_n_Image, pieceX, pieceY, taille_case, taille_case);
    }
    
    
    
    
    
    if (p.Type.equals("Roi") && p.Couleur == true) {
      imageMode(CENTER);
      image(roi_b_Image, pieceX, pieceY, taille_case/1.5, taille_case/1.5);
    }

    if (p.Type.equals("Reine") && p.Couleur == true) {
      imageMode(CENTER);
      image(reine_b_Image, pieceX, pieceY, taille_case/1.5, taille_case/1.5);
    }

    if (p.Type.equals("Pion") && p.Couleur == true) {
      imageMode(CENTER);
      image(Pion_b_Image, pieceX, pieceY, taille_case/1.5, taille_case/1.5);
    }

    if (p.Type.equals("Fou") && p.Couleur == true) {
      imageMode(CENTER);
      image(fou_b_Image, pieceX, pieceY, taille_case/1.5, taille_case/1.5);
    }

    if (p.Type.equals("Cavalier") && p.Couleur == true) {
      imageMode(CENTER);
      image(cavalier_b_Image, pieceX, pieceY, taille_case/1.5, taille_case/1.5);
    }
    if (p.Type.equals("Tour") && p.Couleur == true) {
      imageMode(CENTER);
      image(tour_b_Image, pieceX, pieceY, taille_case, taille_case);
    }
    
  }
}

class Piece {
  String Type;
  Boolean Couleur; // true > blanc | false > noir
  int x, y;


  Piece(String Type_piece, Boolean Couleur_piece, int lignes, int colonnes ) {
    Type = Type_piece;
    Couleur = Couleur_piece;
    x = colonnes;
    y = lignes;
  }
}
